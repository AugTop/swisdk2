# ContentSite

## Standard ContentSite Modes

* default
	invoked when ContentSite gets no arguments
	Example: /controller/
* archive
	all entries for some time period (year, month, day)
	Example: /controller/2005/12/
* feed
	XML feed (RSS 2.0)
	Example: /controller/category/swisdk/feed/
* single
	detail view of an entry
	Example: /controller/2005/12/entry-title/ OR /controller/?p=102
* trackback
	special mode for single view which handles trackbacks
	Example: /controller/2005/12/entry-title/trackback/


## ContentSite parser configuration

When the parser has finished, ContentSite::run() tries to execute
a member function named handle_ + <mode>, f.e. handle_single()

The parser configuration is a nested array having the following format:

<request key> => array(
	<key type>,
	[mode => <mode>]
	)
where
<request key> is an URL fragment
<key type> is CONTENT_SITE_PARAM_NONE or CONTENT_SITE_PARAM_ONE
<mode> is a facultative value with the name of another mode
which will be set if the request key matches an url fragment

For example, you might want to provide iCcal feeds to your users:

$this->parser_config['ical'] = array(CONTENT_SITE_PARAM_NONE);

Now, if the string 'ical' is part of the arguments, ContentSite::run()
will try to execute handle_ical()


## ContentSite configuration values

ContentSite uses the following config values:

* comments_enabled (bool, false)
* feed_enabled (bool, false)
* trackback_enabled (bool, false)
	Whether these features are enabled for all ContentSite
	instances (content.xy_enabled) or only for a certain
	DBObject class (content.dbo_class.xy_enabled)
* cut_off_archive (bool, true)
	Apply cut-off if archive mode is archive
* cut_off_past (string, NULL)
	Which field (type unix timestamp) should be used to hide
	entries with past dates. (f.e. start dttm of an event in
	an agenda)
* cut_off_future (string, NULL)
	Which field (type unix timestamp) should be used to hide
	entries with future dates (f.e. publication dttm of an
	article which should only appear after said time)
* order (string, <prefix>start_dttm)
	Field which should be used to order the entries
	(defaults to <prefix>start_dttm)
	The ordering direction can also be specified by adding
	:ASC or :DESC to the field string
* default_limit (int, 10)
	Maximal count of entries on one page (defaults to 10)
* pubdate_field (string, <prefix>start_dttm)
	publication date field (used for archive filtering)
* slug_field (string, <prefix>name)
	slug field for single mode entry matching (defaults to
	<prefix>name)
* categories (bool, false)
	True if a Category DBObject table exists and there is an
	n-to-m relation from content items to categories.
* realm_links (bool, false)
	Should PermissionManager::add_realm_clause() be callled
	with the DBOContainer?
* permission_filter (bool, true)
	Should permission filtering be applied to the content?
* active_filter (bool, true)
	Is there an "active" flag which should be honored?


## ContentSite templates

The template keys which ContentSite tries to use are the following:

<dbo_class>.list
<dbo_class>.single

The template source is resolved using Swisdk::template(). You should
use the template inheritance mechanism (not SmartyMaster) if you need
the ContentSite's functionality.

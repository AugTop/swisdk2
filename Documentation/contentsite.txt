# ContentSite

## Standard ContentSite Modes

* default
	invoked when ContentSite gets no arguments
	Example: /controller/
* archive
	all entries for some time period (year, month, day)
	Example: /controller/2005/12/
* feed
	XML feed (RSS 2.0)
	Example: /controller/category/swisdk/feed/
* single
	detail view of an entry
	Example: /controller/2005/12/entry-title/ OR /controller/?p=102
* trackback
	special mode for single view which handles trackbacks
	Example: /controller/2005/12/entry-title/trackback/


## ContentSite parser configuration

The parser configuration is a nested array having the following format:

<request key> => array(
	<key type>,
	[mode => <mode>]
	)
where
<request key> is an URL fragment
<key type> is CONTENT_SITE_PARAM_NONE or CONTENT_SITE_PARAM_ONE
<mode> is a facultative value with the name of another mode
which will be set if the request key matches an url fragment

When the parser has finished, ContentSite::run() tries to execute
a member function named handle_ + <mode>, f.e. handle_single()

For example, you might want to provide iCcal feeds to your users:

$this->parser_config['ical'] = array(CONTENT_SITE_PARAM_NONE);

Now, if the string 'ical' is part of the arguments, ContentSite::run()
will try to execute handle_ical()


## ContentSite filtering

The filtering framework can be accessed using ContentSite's filter()
method.

ContentSite uses introspection to find all methods whose names start
with 'filter_' and by default calls everyone of them. You can pass
a configuration string when calling filter(). This function accepts
a comma-separated list of filter specifications.

If the filter specification starts with a bang (!), this filter
is explicitly excluded from running. If you pass any filter
specifications without a bang, only the passed filters will be
run.

Examples:

* $this->filter('limit,order');
  Only apply 'limit' and 'order' filters
* $this->filter('!slug,!limit');
  Apply all filters except 'slug' and 'limit'
* $this->filter('!limit,order');
  Only apply 'order' filter (The '!limit' specification has no effect)

### Filter descriptions

See also the following chapter for the description of the configuration
variables.

limit

: Apply paging filters. Enabled by default.

  Configuration variables: `default_limit`

cutoff

: Hide entries from the future or in the past. Disabled by default.

  Configuration variables: `cut_off_past`, `cut_off_future`

order

: Apply ordering. Enabled by default, uses <prefix>start_dttm for
  sorting.

  Configuration variables: `order`

category

: Uses a central Category table to filter by category. Disabled by
  default.

  Configuration variables: `categories`

archive

: Filter by a date range. Enabled by default.

  Configuration variables: `pubdate_field`

slug

: Filter by a post name. Enabled by default.

  Configuration variables: `slug_field`

permission

: Filter by realm. Uses PermissionManager::set_realm_clause. Disabled
  by default.

  Configuration variables: `permission_filter`

active

: Filter by `active` flag. Disabled by default.

  Configuration variables: `active_filter`


## ContentSite configuration values

ContentSite uses the following config values:

* comments_enabled (bool, false)
* feed_enabled (bool, false)
* trackback_enabled (bool, false)
	Whether these features are enabled for all ContentSite
	instances (content.xy_enabled) or only for a certain
	DBObject class (content.dbo_class.xy_enabled)
* cut_off_archive (bool, true)
	Apply cut-off if ContentSite is in archive mode. You might
	want to deactivate this for event calendars. Otherwise,
	past events cannot be seen even if accessed like
	/events/2003/12/ . On the other hand, you want to activate
	archive cut-off for an article site: Otherwise, a visitor
	can see articles which have a publication date in the
	future by providing a date in the URL.
* cut_off_past (string, NULL)
	Which field (type unix timestamp) should be used to hide
	entries with past dates. (f.e. start dttm of an event in
	an agenda)
* cut_off_future (string, NULL)
	Which field (type unix timestamp) should be used to hide
	entries with future dates (f.e. publication dttm of an
	article which should only appear after said time)
* order (string, <prefix>start_dttm)
	Field which should be used to order the entries
	(defaults to <prefix>start_dttm)
	The ordering direction can also be specified by adding
	:ASC or :DESC to the field string. Set to false to disable
	ordering.
* default_limit (int, 10)
	Maximal count of entries on one page (defaults to 10)
* pubdate_field (string, <prefix>start_dttm)
	publication date field (used for archive filtering). Set
	to false to disable archive filtering.
* slug_field (string, <prefix>name)
	slug field for single mode entry matching (defaults to
	<prefix>name). Set to false to disable slug filtering.
* categories (bool, false)
	True if a Category DBObject table exists and there is an
	n-to-m relation from content items to categories.
* realm_links (bool, false)
	Are the content DBObjects associated with a primary realm
	which should be displayed?
* permission_filter (bool, false)
	Should permission filtering be applied to the content?
* active_filter (bool, false)
	Is there an "active" flag which should be honored?


## ContentSite templates

The template keys which ContentSite tries to use are the following:

<dbo_class>.list
<dbo_class>.single

The template source is resolved using Swisdk::template(). You should
use the template inheritance mechanism (not SmartyMaster) if you need
the ContentSite's functionality.

## ContentSite smarty extensions

### Paging

* {generate_pagelinks}
  Creates a list of offsets with direct links to the corresponding
  pages:
  0 5 10 15 20 25 30 ...

The following functions return nothing if clicking the links would
not change the user's current position.

The titles are optional.

* {generate_page_first [title="optional title"]}
* {generate_page_last [title="optional title"]}
* {generate_page_forward [title="optional title"]}
* {generate_page_backward [title="optional title"]}

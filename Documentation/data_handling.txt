# Data handling

## Minimal example

This example uses the following table schema:

    CREATE TABLE tbl_news (
        news_id INT NOT NULL AUTO_INCREMENT,
        news_title VARCHAR(255),
        news_text TEXT,
        PRIMARY KEY(news_id));

This is a complete news module:

    $id = getInput('id');
    if($id && ($do = DBObject::find('News', $id))) {
    	// ID was valid
    	display_news_entry($do->data());
    } else {
    	$container = DBOContainer::find('News');
    	foreach($container as &$obj) {
    		display_news_entry_listing($obj->data());
    	}
    }

    function display_news_entry_listing($data)
    {
    	echo '<h2><a href="?id="' . $data['news_id'] . '">'
    		. $data['news_title'] . '</a></h2>';
    	echo '<p>' . $data['news_intro'] . '</p>';
    }

    function display_news_entry($data)
    {
    	echo '<h2>' . $data['news_title'] . '</h2>';
    	echo '<p>' . $data['news_intro'] . '</p>';
    	echo '<p>' . $data['news_text'] . '</p>';
    }

## Customizing the behavior of DBObject

Instead of relying on the automatic rules for DBObject creation you
might like to override its behavior in a derived class. If you inherit
from DBObject, you always have to include one line of boilerplate
code:

    class News {
    	// this is necessary:
    	protected $class = __CLASS__;

	// here, you might add your own methods or override the behavior
	// of existant methods, for example:
	public function insert()
	{
		$this->creation_dttm = time();
		return parent::insert();
	}
    }

## Data manipulation

    // get user with ID 2
    $user = DBObject::find('User', 2);
    // change email address ...
    $user->email = 'mk@irregular.ch';
    // and store the changed record
    $user->store();

    print_r($user->data());;
    
    // change the same record using a different DBObject (no locking
    // of DB records!)
    $blah = DBObject::find('User', 2);
    $blah->email = 'matthias@spinlock.ch';
    $blah->store();

    // verify that the modification has not changed our original DBObject,
    // but that we can get the modifications by refresh()ing our first object
    print_r($user->data());
    $user->refresh();
    print_r($user->data());

    // insert a new record into the database
    $obj = DBObject::create('User');
    $obj->login = 'alkdjkjhsa';
    $obj->name = 'suppe';
    $obj->forename = 'kuerbis';
    $obj->email = 'kuerbis@example.com';
    $obj->password = md5('testpassword');
    $obj->insert();

## Using relations

Every picture has exactly one author, but the author might have made
multiple pictures. The following two statements express the described
relation (Note: you only need to use one possibility)

    DBObject::belongs_to('Picture', 'Author');
    DBObject::has_many('Author', 'Picture');

The corresponding CREATE TABLE commands for MySQL would be:
    
    CREATE TABLE tbl_author (
    	author_id INT NOT NULL AUTO_INCREMENT,
    	author_name VARCHAR(255),
    	PRIMARY KEY(author_id));

    CREATE TABLE tbl_picture (
    	picture_id INT NOT NULL AUTO_INCREMENT,
    	picture_author_id INT,
    	picture_filename VARCHAR(255)
    	PRIMARY KEY(picture_id));

There are multiple categories (People, Events, Places...). Every picture
may have 0-n categories:

    DBObject::n_to_m('Picture', 'Category');

    CREATE TABLE tbl_category (
    	category_id INT NOT NULL AUTO_INCREMENT,
    	category_title VARCHAR(255)
    	PRIMARY KEY(category_id));

    CREATE TABLE tbl_picture_to_category (
    	picture_id INT,
    	category_id INT);

You must pass the two classes to DBObject::n_to_m() in the same order as
in the table name.

    Complete code example (That's right, you don't need to explicitly derive
    the Author, Picture and Category classes):

    DBObject::belongs_to('Picture', 'Author');
    DBObject::n_to_m('Picture', 'Category');

    // get author ID 42 from database
    $author = DBObject::create('Author', 42);

    // get all pictures that he made
    $pictures = $author->related('Picture');

    // loop over all pictures and get their categories
    foreach($pictures as &$picture) {
    	$categories = $picture->related('Category');
    	// [...] do something with it, display a gallery or whatever
    }

## Multiple relations with the same table

An event might have both an author and a contact person. They are both
stored in tbl_user. We cannot use event_user_id because we have
two related users for every event.

    DBObject::belongs_to('Event', 'User', 'event_author_id');
    DBObject::belongs_to('Event', 'User', 'event_contact_id');

Now you may use:

    $event = DBObject::find('Event', 42);
    $author = $event->related('event_author_id');
    $contact = $event->related('event_contact_id');

Note! See how you are passing the field name instead of a DBObject
class name now.

If you want to get all events that some user authored you have
to do it differently:

    $events = DBOContainer::create('Event');
    $events->add_clause('event_author_id=', 13);
    $events->init();

[[projects/swisdk|back to SWISDK]]
